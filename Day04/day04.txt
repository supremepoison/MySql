Day03回顾
1.嵌套查询(子查询)
    1.把内层的查询结果作为外层的查询条件
2.多表查询
    1.笛卡尔积: 不加where条件
    2.加where条件: 只显示匹配到的
3.连接查询
    1.内连接:只显示匹配到的
    2.外连接
        1.左连接:   以作表为主显示查询结果
        2.右连接:   以右表为主显示查询结果
        
        select ... from 表1 inner/left/right join 表2 on  条件
4.约束
    1.默认约束(default)
    2.非空约束(not null)
5.索引
    1.优点:加快数据检索速度
    2.缺点:占用物理存储空间,需要动态维护,消耗系统资源
    3.SQL命令运行时间检测
        1.开启: MySql> set profiling= 1;
        2.查看: MySql>show profiles;
        3.关闭: MySql>set profiling=0;
6.索引分类
    1.普通(MUL),唯一索引(UNI,字段值不能重复,可为NULL)
        1.创建
            index(...),index(...),unique(...)
            create unique index 索引名 on 表名(字段名)
        2.查看
            desc 表名
            show index from 表名\G
        3.删除
            drop index 索引名 on 表名
    2.主键%%自增长(PRI,不能重复,且不能为NULL)
        1.创建
        id int primary key auto_increment;
        alter table 表名 add primary key(字段名);
        2.删除
            alter table 表名 modify id int;
            alter table 表名 drop primary key;
        3.指定自增长的起始值
            1.create table 表名() auto_increment =1000;
            2.alter table 表名 auto_increment = 1000;
    3.外键
        1.使用规则
         1.主表,从表数据类型要一致
         2.主表被参考字段一定要为主键
        2.语法格式
            foreign key(...) references 主表(...)
            on delete cascade
            on update cascade
        3.级联动作
            1.cascade: 删除,更新同步
            2.restrict: 默认,从表有相关联的数据不让主表删除,更新
            3.set null: 主表删除,更新,从表该字段设置为NULL
        4.删除
            1.show create table 从表;
            2.alter table 表名 drop foreign key 外建名
        5.已有表
            alter table 表名 add constraint 外键名
            foreign key(...) .... 
        6.注意
            1.在已有表中条件外键关联时,会受到表中原有数据的限制

*********************************************************************************



Day04笔记
1.锁(MYSQL 自动加锁和释放锁)
    1.目的: 解决客户端并发访问的冲突问题
    2.锁分类
        1.锁类型
            1.读锁(共享锁)
                select:加读锁之后别人可以查询,但是不能更改(update)
            2.写锁(互斥锁,排他锁)
                update : 加写锁之后,别人不能查,不能改,
        2.锁粒度
            1.行级锁: 可加读锁,写锁
            2.表级锁: 可加读锁,写锁
2.存储引擎(处理表的处理器)
    1.基本操作
        1.查看所有存储引擎
            show engines;
        2.查看已有表的存储引擎
            show create table 表名;
        3.创建表时制定一个存储引擎
            create table 表名(...)engine = MyISAM; 
        4.已有表
            alter table 表名 engine  = InnoDB;
    2.常用的存储引擎特点
        1.InnoDB特点:
            1.支持事务,外键,行级锁,
            2.共享表空间
                表名.frm:   表结构,索引信息
                表名.ibd:   表记录
        2.MyISAM特点
            1.支持表级锁
            2.独享表空间
                表名.frm:   表结构
                表名.MYD:   表记录
                表名.MYI:   索引信息
        3.Memory特点
            1.表结构存储在硬盘,表记录存储在内存里,速度快
            2.服务/主机重启后,表记录消失,表结构存在
    3.如何选择使用存储引擎
        1.执行 查询 操作多的表 使用 MyISAM(使用InnoDB浪费资源)
        2.执行 写  操作多的表 使用 InnoDB

3.数据备份(mysqldump,在linux终端中操作)
 完全备份
 增量备份
    1.mysqldump -u用户名 -p 源库名 > xxx.sql
    2.源库名表示方式
        --all-databases  备份所有的库
        库名              备份单个库
        -B 库1 库2 库3    备份多个库
        库名 表1 表2 表3    备份指定库多张表
    3.示例
        1.备份所有库,放到mydata目录下: all.sql
        mysqldump -uroot -p --all-databases > all.sql
4.数据恢复(Linux终端中操作)
    1.mysql -u用户名 -p 目标库名 < xxx.sql
    2.mysql -u用户名 -p --one-database db3 < all.sql

    示例:
        1.做三件事
            1.在db3.sheng表中新增加一条记录
                insert into sheng values(11,200003,'日本省');
            2.在db3库创建表t888.插入一条记录
            3.从all.sql中恢复db3
    3.注意
        1.恢复库时,会将表中数据覆盖,新增表不会删除
        2.恢复时,如果要恢复的库不存在,则先创建空库

5.数据导入
    1.作用: 把文件系统的内容导入到数据库中
    2.语法格式
        load data infile '文件名'
        into table 表名
        fields terminated by '分隔符'
        lines terminated by '\n'
    3.导入步骤
        1.在数据库中创建对应的表
        2.把文件拷贝到数据库的搜索路径中
            1.查看搜索路径
             show variables like 'secure_file_priv';
            2.拷贝文件到
                sudo cp scoreTable.csv /var/lib/mysql-files/
        3.执行数据导入语句
            load data infile '/var/lib/mysql-files/scoreTable.csv' 
            into table score 
            fields terminated by ',' 
            lines terminated by '\n';
    4.文件权限
        -rwxr--r-- tarena tarena scoreTable.csv

        最左侧-: 代表文件
        r : 可读        4
        w : 编辑        2
        x : 可执行      1

        
        rwx     1.文件所有者权限    tarena
        r--     2.文件所属组权限    
        r--     3.其他用户权限 
    
    5.修改文件权限
        r:  4
        w:  2
        x:  1
        chmod 777 文件名
6.数据导出
    1.把数据库中表笔记导出到系统文件里
    2.语法格式
        select ... from 表名 where 条件
        into outfile '文件名'
        fields terminated by '分隔符'
        lines terminated by '\n';
    3.示例
        把MOSHOU库下的sanguo表英雄的姓名,攻击值和国家导出到 sanguo.csv

        select name, gongji, country from sanguo 
        into outfile '/var/lib/mysql-files/sanguo.csv'
        fields terminated by ','
        lines terminated by '\n';
7.E-R模型(Entry-Relationship)
    1.定义: 实体-关系模型,数据模型,用于设计数据库
    2.三个概念
        1.实体 : 描述客观事物的概念
            1.表示方式: 矩形框
            2.示例: 一个人,一本书,一杯咖啡
        2.属性
            实体具有的特性
            表示方式:椭圆形
        3.关系
            1.各个实体之间的联系
            2.分类
                1.一对一(1:1):老公对老婆
                    A中的一个实体,在B中只能有一个与其关联
                    B中的一个实体,在A中只能有一个与其关联

                2.一对多(1:n):父亲对孩子
                    A中的一个实体,在B中有n个与其关联
                    B中的一个实体,在A中只能有一个与其关联
                3.多对多(m:n): 兄弟姐妹对兄弟姐妹
                    A中的一个实体,在B中只n个与其关联
                    B中的一个实体,在A中只n个与其关联
    3.ER图绘制
        1.矩形框代表实体
          菱形框代表关系
          椭圆形代表属性
        2.示例(老师与课题)
            老师 : 员工号,姓名,职称
            课题 : 课题号,课题名称
            关系 : m:n
        3.练习
            1.设计一个学生选课系统的ER图
                实体: 学生,课程,老师
                学生: 学号,姓名
                课程: 课程编号,课程名称
                老师: 员工号,姓名
                关系: 老师 - 教 - 学生  m : n
                     学生 - 选 - 课程  m : n

    4.数据库三范式
        1.第一范式(1NF): 列不可拆分
        2.第二范式(2NF): 唯一标识
        3.第三范式(3NF): 引用主键
        说明: 后一个范式都是在前一个范式的基础上建立的

8.MySQL 用户管理
    1.开启远程连接
        1.sudo -i 
        2.cd /etc/mysql/mysql.conf.d/
        3.subl mysqld.cnf
            bind-address = 127.0.0.1
        4./etc/init.d/mysql restart
    2.添加授权用户
        1.用root用户登录mysql
            mysql -u root -p
        2.授权
            grant 权限列表 on 库.表 to '用户名'@'%' 
            identified by '密码'
            with grant option;

            权限列表 : all privileges, select, drop
            库.表   : 库.*, *.*(所有库的所有表)

    3.示例
        1.添加授权用户 tiger 对 stdb4库有所有权限 ,密码为 123


作业:
    1.把 /etc/passwd 导入到数据表 userinfo
    tarena: x : 1000: 1000 : tarena : /home/tarena : /bin/bash
    用户名  密码  uid  gid     用户描述   主目录         登录权限
    2.在userinfo 表的第一列添加一个id 字段 并且是主键 自增长 显示宽度为三 位数不够用0 填充

    show variables like 'secure_file_priv'

    

                             


